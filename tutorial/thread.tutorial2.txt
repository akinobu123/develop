■■■ Threadの待ち合わせ ■■■
ソースコード：http://mmds03.rdh.fujixerox.co.jp/dsweb/Services/Document-6727309

■演習用クラスに関して
・CJob：
　ジョブ処理自体を制御するクラス。
　execute()で擬似的なジョブ処理を行う。
　今回は、CDummyIITにstartScan()要求を出してwaitForScanCompleted()でscan完了を待ち合わせてその後の処理を継続する想定。
・CDummyIIT：
　擬似的IIT処理を行うクラス。
　startScan()要求を受けると別スレッドを起動して擬似的スキャン処理を(CDummyIIT::run())開始する。
　擬似的スキャン処理完了時にCDummyIIT::ICallbackReceiver::onScanCompleted()を呼び出す。
　CDummyIIT::ICallbackReceiverの実体はCJob。
・main：
　main関数定義。

■その他クラスに関して
・特に理解する必要はありません。

--------------
http://www.techscore.com/tech/Java/JavaSE/Thread/5-2/
※Javaの記載ですが同じ考え方なので参考に記載します。

複数のスレッドが協調して処理を行う場合、あるスレッドの部分処理が終了するのを、もう一方のスレッドが待機したい場合があります。そのようなとき、java.lang.Objectクラスのwait/notify/notifyAllメソッドを使用します。

wait()

waitメソッドは、notifyまたはnotifyAllメソッドが呼び出されるまで処理を待機するメソッドです。waitメソッドを呼び出すためには、スレッドは該当するオブジェクトのロックを取得していなければいけません。

notify()/notifyAll()

notifyおよびnotifyAllメソッドは、waitメソッドによって待機状態にあるスレッドの実行を再開させるメソッドです。あるオブジェクトに関して、waitメソッドで待機しているスレッドの集合のことを「ウェイトセット」と呼びます。notifyメソッドは、ウェイトセット内の１つのスレッドの処理を再開させます。再開されるスレッドは、Java仮想マシンによって任意に選ばれ、プログラムで指定することはできません。notifyAllメソッドは、ウェイトセット内の全てのスレッドの処理を再開させます。notifyおよびnotifyAllメソッドを実行するためには、waitメソッドの場合と同じく、該当オブジェクトのロックを取得していなければなりません。
--------------


■■ 演習 ■■
■Threadの待ち合わせ
別のスレッドで処理をする場合、処理を要求したスレッドで処理の完了を待ち合わせたい場合がよくあります。
演習用サンプルコード2で、処理を待ち合わせる手順を学んでください。
よく利用されるパターンは、処理の完了Flagを用意し、待ち合わせる方法です。

■コールバックの待ち合わせの実装。
今回は、別スレッドのIIT処理をCJob::execute()内のCDummyIIT::startScan()呼び出し後に
別スレッドでの擬似的スキャン処理完了を待ち合わせます。
待ち合わせはCJob::waitForScanCompleted()で以下の実装により行います。
　-::clib::CSynchronizerのlockを取得。
  -Flagが完了状態でない間、::clib::CSynchronizer(CSynchronized)のwait()を呼ぶ。
　 (waitを呼び出すと、lockは一旦開放されます)
  ex)
  void CXxx::wait()
  {
      ::clib::CSynchronized sync(fSync);
      while (! fIsCompleted) {
          sync.wait();
      }
  }
サンプルコードのCJob::waitForScanCompleted()を実装してください。

■コールバックの実装。
別スレッドでの擬似的スキャン処理完了コールバック関数を実装します。
waitしている関数を起動する必要があります。
waitの起動はCJob::onScanCompleted()で以下の実装により行います。
　-::clib::CSynchronizerのlockを取得。
　-Flagを完了状態に変更。
　-::clib::CSynchronizer(CSynchronized)のnotifyAll()を呼ぶ。
　 (notifyAllを呼び出すと、waitしているスレッドが起動されます)
　ex)
  void CXxx::onXxxCompleted()
  {
      ::clib::CSynchronized sync(fSync);
      fIsCompleted = true;
      sync.notifyAll();
  }
サンプルコードのCJob::onScanCompleted()を実装してください。

待ち合わせがうまくできていると、以下の順番で出力が表示されます。

CJob:execute requested
CDummyIIT:scan requested
CJob:scan requested
CJob:wait start
CDummyIIT:now scanning...
CDummyIIT:now scanning...
CDummyIIT:now scanning...
CDummyIIT:scan completed
CJob:wait end
CJob:scan completed

